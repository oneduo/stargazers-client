schema {
  query: Query
  mutation: Mutation
}
scalar DateTime
scalar Upload
scalar Date
scalar DateTimeTz
type Query {
  packages(session: ID): [Package!]
  session(session: ID!): Session
  statistics: Statistics!
}
type Package {
  id: ID!
  name: String!
  url: String!
  image: String!
  pivot: PackageSession
}
type PackageSession {
  starred_at: DateTime
  status: Status!
}
type Session {
  id: ID!
  packages: [Package!]
  stargazer: Stargazer
}
type Stargazer {
  username: String!
}
type Statistics {
  projectsCount: Int!
  starsCount: Int!
  usersCount: Int!
}
type Mutation {
  upload(upload: Upload): [Package!]
  star(packages: [ID!]): String!
}
"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!
  "Index of the current page."
  currentPage: Int!
  "Index of the first item in the current page."
  firstItem: Int
  "Are there more pages after this one?"
  hasMorePages: Boolean!
  "Index of the last item in the current page."
  lastItem: Int
  "Index of the last available page."
  lastPage: Int!
  "Number of items per page."
  perPage: Int!
  "Number of total available items."
  total: Int!
}
"Information about pagination using a simple paginator."
type SimplePaginatorInfo {
  "Number of items in the current page."
  count: Int!
  "Index of the current page."
  currentPage: Int!
  "Index of the first item in the current page."
  firstItem: Int
  "Index of the last item in the current page."
  lastItem: Int
  "Number of items per page."
  perPage: Int!
  "Are there more pages after this one?"
  hasMorePages: Boolean!
}
"Information about pagination using a Relay style cursor connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "The cursor to continue paginating backwards."
  startCursor: String
  "The cursor to continue paginating forwards."
  endCursor: String
  "Total number of nodes in the paginated connection."
  total: Int!
  "Number of nodes in the current page."
  count: Int!
  "Index of the current page."
  currentPage: Int!
  "Index of the last available page."
  lastPage: Int!
}
enum Status {
  DONE
  PENDING
  ERROR
}
"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC
  "Sort records in descending order."
  DESC
}
"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}
"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG
  "Minimum."
  MIN
  "Maximum."
  MAX
  "Sum."
  SUM
  "Amount of items."
  COUNT
}
"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY
  "Return both trashed and non-trashed results."
  WITH
  "Only return non-trashed results."
  WITHOUT
}
"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!
  "The direction that is used for ordering."
  order: SortOrder!
}
